schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/tag/v0.3")
{
  query: Query
}

enum join__Graph {
  PRODUCTS @join__graph(name: "products", url: "http://localhost:4001/")
  USERS @join__graph(name: "users", url: "http://localhost:4002/")
}
scalar join__FieldSet

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar ErrorRate
@join__type(graph: PRODUCTS)
@join__type(graph: USERS)

directive @synthetics(
  """The synthetic timeout configured for the field."""
  timeout: Int

  """The synthetic error rate configured for the field."""
  errorRate: ErrorRate

  """Enable or disable synthetics for the field."""
  enabled: Boolean = true
) on FIELD

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION | SCHEMA

type Query
@join__type(graph: USERS)
{
  """Information about the current logged-in user."""
  me: User @join__field(graph: USERS)
}

type User
@join__type(graph: USERS)
{
  name: String
}
